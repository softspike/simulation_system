import random
import string
import math
import sqlite3

class Dataset: #class for generating simulation's dataset.

    def __init__(self): #constructor refers to task objects, which contain the following default attributes:
        self.task_id = "" # holds randomly generated task id, as a string.
        self.arrival_time = 0 # holds randomly gemerated arrival time, as a float.
        self.duration_time = 0 # holds randomly generated duration time, as an intager.
        self.data_set = [] # holds empty list, for 100 task storage.

    def id_name(self): # ID: generate a random string of 6 random characters. The adopted and applied method: Author: suman_709, * URL: https://www.geeksforgeeks.org/generating-random-ids-python/
        letters = string.ascii_letters# a’-’z’ and ’A’-’Z’
        characters = "-@#*&_"
        numbers = string.digits # ’0’-’9’
        random_stuff = (letters + characters + numbers)
        self.task_id = "".join(random.choices(random_stuff, k=6)) #random URL: choice https://docs.python.org/3/library/random.html

    def arrival_period(self): # Arrival: A random real value generated by a uniform distribution from 0 to 100.
        self.arrival_time = random.uniform(0,100)

    def duration_period(self): # Duration: A random value generated by an exponential distribution of parameter 1, rounded up. Author: Program_Creek * URL: https://www.programcreek.com/python/example/8889/random.expovariate
        exponential_distribution = random.expovariate(1)
        self.duration_time = math.ceil(exponential_distribution) #rounds up the value to the closest next intager, bigger than the initial value.

    def dataset(self): # Create 100 tasks

        for i in range(100): # range indicates how many tasks will be added to task object's data_set attribute.
            task.id_name() # calling a method on task object, to update task_id attribute.
            task.arrival_period() # calling a method on task object, to update arrival_time attribute.
            task.duration_period() # calling a method on task object, to update duration_time attribute.
            self.data_set += [(task.task_id, task.arrival_time, task.duration_time)] # task is created in a form of a tuple, with task object's attributes, stored in a list.


class Database: #class for generating simulation's database.

    def __init__(self): #default constructor refering to database (db) object.
        self.connection = None

    def initialise_database(self): # a method to initialise a database.
        self.connection = sqlite3.connect("test2.db") # establishes a connection to the SQLite database (test2.db)
        cursor = self.connection.cursor() # cursor allows queries to be executed in a database session.

        primary_key = "primary_key INTEGER PRIMARY KEY AUTOINCREMENT" #Heading for primary key column
        id = "id TEXT NOT NULL"   #Heading for task's id column
        arrival = "arrival REAL NOT NULL" #Heading for task's arrival time column
        duration = "duration INTEGER NOT NULL" #Heading for task's duration column

        table = f"CREATE TABLE stuffToPlot ({primary_key},{id},{arrival},{duration})" #creating a table inside test2.db
        try:
            cursor.execute(table) #executes SQL commands via cursor - table
            print("database test2.db created")
        except:
            print("table {} already exists" .format("stuffToPlot"))

        self.connection.commit() # to save all the changes in the current function
        self.connection.close() # close connection

    def insert_record(self): # a method to insert 100 tasks inside the stuffToPlot table, inside the database test2.db
        self.connection = sqlite3.connect("test2.db")
        cursor = self.connection.cursor()
        data = self.connection.execute("SELECT id, arrival, duration from stuffToPlot")
        records = data.fetchall() # fetches all the rows of a query result and returns a list of tuples.
        if len(records)<100: #100 tasks has been added into the database (test2.db)
           try: # accessing task object's data_set attribute, which contains 100 tasks, looping through and inserting inside the database.
               cursor.executemany("INSERT INTO stuffToPlot (id, arrival, duration) VALUES (?,?,?)", task.data_set)
           except sqlite3.OperationalError: # In case there is an error with tasks being inserted into the database, the bellow message will indicate operation was unsucessful.
               print("data insertion failed" .format("stuffToPlot"))

        self.connection.commit()
        self.connection.close()


if __name__ == "__main__":
    task = Dataset() #creating a task object from Dataset class.
    task.dataset() #calling the dataset method to create 100 tasks.
    db = Database() #creating a database object (db) from Database class.
    db.initialise_database() #calling the initialise_database method, to create the database.
    db.insert_record() #calling the insert_record method, to insert 100 tasks inside the database.
